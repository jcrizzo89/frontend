import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { ErrorDialogComponent } from '../../../../shared/components/error-dialog/error-dialog.component';
import { Observable, of, Subscription, forkJoin } from 'rxjs';
import { switchMap, map, catchError, finalize } from 'rxjs/operators';
import { Cliente, UbicacionCliente } from '../../models/client.model';
import { Zona } from '../../../../core/models/zona.model';
import { ZonaService } from '../../../../core/services/zona.service';
import { ClientService } from '../../services/client.service';
import { ConfirmDialogComponent } from '../../../../shared/components/confirm-dialog/confirm-dialog.component';

interface ClienteFormData {
  nombre: string;
  telefono: string;
  idZona: string;
  observaciones?: string;
  alerta: boolean;
  ubicaciones?: any[];
  imagenReferencia?: File;
}

@Component({
  selector: 'app-client-form',
  templateUrl: './client-form.component.html',
  styleUrls: ['./client-form.component.css']
})
export class ClientFormComponent implements OnInit, OnDestroy {
  @Input() client: Cliente | null = null;
  @Output() close = new EventEmitter<void>();
  @Output() saved = new EventEmitter<Cliente>();

  clientForm: FormGroup;
  isEditing = false;
  isLoading = false;
  zonas: Zona[] = [];
  private subscriptions = new Subscription();

  constructor(
    private fb: FormBuilder,
    private clientService: ClientService,
    private zonaService: ZonaService,
    private dialog: MatDialog
  ) {
    this.clientForm = this.createForm();
  }

  ngOnInit(): void {
    this.loadZonas();
    
    if (this.client) {
      this.isEditing = true;
      this.loadClientData();
    }
  }

  ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
  }

  private loadZonas(): void {
    this.isLoading = true;
    this.subscriptions.add(
      this.zonaService.getAll().subscribe({
        next: (zonas) => {
          this.zonas = zonas;
          this.isLoading = false;
        },
        error: (error) => {
          console.error('Error al cargar las zonas:', error);
          this.isLoading = false;
          this.showError('Error al cargar las zonas. Por favor, intente nuevamente.');
        }
      })
    );
  }

  private loadClientData(): void {
    if (!this.client) return;

    // Extraer código de área del teléfono si existe (asumiendo formato: '+543511234567')
    let codigoArea = '';
    let telefonoNumero = this.client.telefono || '';
    
    if (telefonoNumero.startsWith('+54')) {
      const numeroSinCodigoPais = telefonoNumero.substring(3);
      const codigoAreaLength = Math.min(4, Math.max(2, numeroSinCodigoPais.length - 6));
      codigoArea = numeroSinCodigoPais.substring(0, codigoAreaLength);
      telefonoNumero = numeroSinCodigoPais.substring(codigoAreaLength);
    }

    this.clientForm.patchValue({
      idCliente: this.client.idCliente,
      nombre: this.client.nombre,
      codigoArea: codigoArea,
      telefono: telefonoNumero,
      idZona: this.client.idZona,
      observaciones: this.client.observaciones || '',
      alerta: this.client.alerta || false
    });
    
    // Cargar ubicaciones si existen
    const ubicacionesArray = this.clientForm.get('ubicaciones') as FormArray;
    ubicacionesArray.clear();
    
    if (this.client.ubicaciones && this.client.ubicaciones.length > 0) {
      this.client.ubicaciones.forEach(ubicacion => {
        ubicacionesArray.push(this.createUbicacionFormGroup(ubicacion));
      });
    }
  }

  createForm(): FormGroup {
    return this.fb.group({
      idCliente: [null],
      nombre: ['', [
        Validators.required,
        Validators.maxLength(100),
        Validators.pattern(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/)
      ]],
      codigoArea: ['', [
        Validators.required, 
        Validators.pattern('^[0-9]{2,4}$')
      ]],
      telefono: ['', [
        Validators.required, 
        Validators.pattern('^[0-9]{6,12}$')
      ]],
      idZona: ['', Validators.required],
      observaciones: [''],
      alerta: [false],
      ubicaciones: this.fb.array([], this.atLeastOneUbicacion()),
      imagenReferencia: [null]
    });
  }

  createUbicacionFormGroup(ubicacion?: Partial<UbicacionCliente>): FormGroup {
    return this.fb.group({
      idUbicacion: [ubicacion?.idUbicacion || null],
      descripcion: [
        ubicacion?.descripcion || '', 
        [
          Validators.required, 
          Validators.maxLength(100),
          Validators.pattern(/^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\s,.-]+$/)
        ]
      ],
      latitud: [
        ubicacion?.latitud || null, 
        [
          Validators.required,
          Validators.min(-90),
          Validators.max(90),
          Validators.pattern(/^-?\d{1,3}(\.\d+)?$/)
        ]
      ],
      longitud: [
        ubicacion?.longitud || null, 
        [
          Validators.required,
          Validators.min(-180),
          Validators.max(180),
          Validators.pattern(/^-?\d{1,3}(\.\d+)?$/)
        ]
      ],
      linkMaps: [
        ubicacion?.linkMaps || '', 
        [Validators.pattern(/^https?:\/\/.+/)]
      ],
      activa: [ubicacion?.activa !== false]
    });
  }

  get ubicacionesArray(): FormArray<FormGroup> {
    return this.clientForm.get('ubicaciones') as FormArray<FormGroup>;
  }

  addUbicacion(ubicacion?: Partial<UbicacionCliente>): void {
    this.ubicacionesArray.push(this.createUbicacionFormGroup(ubicacion));
  }

  removeUbicacion(index: number): void {
    if (this.ubicacionesArray.length <= 1) {
      this.showError('Debe haber al menos una ubicación');
      return;
    }

    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: 'Eliminar Ubicación',
        message: '¿Está seguro de que desea eliminar esta ubicación?',
        confirmText: 'Eliminar',
        cancelText: 'Cancelar'
      }
    });

    dialogRef.afterClosed().subscribe(confirm => {
      if (confirm) {
        this.ubicacionesArray.removeAt(index);
      }
    });
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      const file = input.files[0];
      if (file) {
        this.clientForm.patchValue({
          imagenReferencia: file
        });
      }
    }
  }

  removeImage(): void {
    this.clientForm.patchValue({
      imagenReferencia: null
    });
  }

  openLink(url: string): void {
    if (url) {
      if (!url.match(/^https?:\/\//i)) {
        url = 'https://' + url;
      }
      window.open(url, '_blank');
    }
  }

  onSubmit(): void {
    this.markFormGroupTouched(this.clientForm);
    
    if (this.clientForm.invalid) {
      this.logFormErrors();
      this.showError('Por favor, complete todos los campos requeridos correctamente.');
      return;
    }

    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: this.isEditing ? 'Actualizar Cliente' : 'Crear Cliente',
        message: `¿Está seguro que desea ${this.isEditing ? 'actualizar' : 'crear'} este cliente?`,
        confirmText: this.isEditing ? 'Actualizar' : 'Crear',
        cancelText: 'Cancelar'
      }
    });

    confirmDialogRef.afterClosed().subscribe(confirm => {
      if (confirm) {
        this.saveClient();
      }
    });
  }

  private saveClient(): void {
    if (this.clientForm.invalid) {
      this.markFormGroupTouched(this.clientForm);
      return;
    }
    
    this.isLoading = true;
    const formValue = this.clientForm.value;
    
    // Preparar los datos para enviar al backend
    const clienteData: any = {
      nombre: formValue.nombre,
      telefono: `+54${formValue.codigoArea}${formValue.telefono}`,
      idZona: formValue.idZona,
      observaciones: formValue.observaciones || '',
      alerta: formValue.alerta || false
    };

    // Si hay ubicaciones, agregarlas al objeto
    if (formValue.ubicaciones && formValue.ubicaciones.length > 0) {
      clienteData.ubicaciones = formValue.ubicaciones.map((ubicacion: any) => ({
        idUbicacion: ubicacion.idUbicacion || undefined,
        descripcion: ubicacion.descripcion,
        latitud: parseFloat(ubicacion.latitud) || 0,
        longitud: parseFloat(ubicacion.longitud) || 0,
        linkMaps: ubicacion.linkMaps || '',
        activa: ubicacion.activa !== false
      }));
    }

    // Determinar si hay una imagen para enviar
    const hasImage = formValue.imagenReferencia && formValue.imagenReferencia instanceof File;
    
    // Realizar la petición al servidor
    let request: Observable<Cliente>;
    
    if (hasImage) {
      // Si hay imagen, usar FormData
      const formData = new FormData();
      formData.append('cliente', JSON.stringify(clienteData));
      formData.append('imagen', formValue.imagenReferencia);
      
      if (this.isEditing && this.client?.idCliente) {
        request = this.clientService.updateWithImage(this.client.idCliente, formData);
      } else {
        request = this.clientService.createWithImage(formData);
      }
    } else {
      // Si no hay imagen, enviar directamente el objeto
      if (this.isEditing && this.client?.idCliente) {
        request = this.clientService.update(this.client.idCliente, clienteData);
      } else {
        request = this.clientService.create(clienteData);
      }
    }

    this.subscriptions.add(
      request.pipe(
        catchError(error => {
          console.error('Error al guardar el cliente:', error);
          let errorMessage = 'Ocurrió un error al guardar el cliente.';
          
          if (error.error?.message) {
            errorMessage = error.error.message;
          } else if (error.status === 400) {
            errorMessage = 'Los datos enviados no son válidos.';
          } else if (error.status === 404) {
            errorMessage = 'No se encontró el recurso solicitado.';
          } else if (error.status >= 500) {
            errorMessage = 'Error en el servidor. Por favor, intente nuevamente más tarde.';
          }
          
          this.showError(errorMessage);
          return of(null);
        }),
        finalize(() => {
          this.isLoading = false;
        })
      ).subscribe(savedClient => {
        if (savedClient) {
          this.saved.emit(savedClient);
          this.showSuccess(`Cliente ${this.isEditing ? 'actualizado' : 'creado'} correctamente.`);
        }
      })
    );
  }

  onClose(): void {
    if (this.clientForm.pristine) {
      this.close.emit();
      return;
    }
    
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: 'Descartar cambios',
        message: '¿Está seguro de que desea salir? Se perderán los cambios no guardados.',
        confirmText: 'Salir',
        cancelText: 'Cancelar'
      }
    });

    dialogRef.afterClosed().subscribe(confirm => {
      if (confirm) {
        this.close.emit();
      }
    });
  }

  private showError(message: string): void {
    this.dialog.open(ErrorDialogComponent, {
      width: '400px',
      data: {
        title: 'Error',
        message: message
      }
    });
  }

  private showSuccess(message: string): void {
    this.dialog.open(ErrorDialogComponent, {
      width: '400px',
      data: {
        title: 'Éxito',
        message: message,
        isSuccess: true
      }
    });
  }

  private markFormGroupTouched(formGroup: FormGroup | FormArray): void {
    Object.values(formGroup.controls).forEach(control => {
      if (control instanceof FormControl) {
        control.markAsTouched();
      } else if (control instanceof FormGroup || control instanceof FormArray) {
        this.markFormGroupTouched(control);
      }
    });
  }

  private logFormErrors(): void {
    Object.keys(this.clientForm.controls).forEach(key => {
      const control = this.clientForm.get(key);
      if (control?.errors) {
        console.log('Control:', key, 'Errors:', control.errors);
      }
    });
  }

  private atLeastOneUbicacion(): ValidatorFn {
    return (control: AbstractControl): { [key: string]: any } | null => {
      const ubicaciones = control as FormArray;
      return ubicaciones.length > 0 ? null : { required: true };
    };
  }
}
